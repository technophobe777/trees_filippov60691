from e02_bst import BST
from tree_node import TreeNode

# DO NOT EDIT THIS FILE!

if __name__ == '__main__':
    # test empty bst
    tree = BST()
    assert tree.root == None, 'expected True, got False'


    # test insertion
    tree = BST()
    tree.insert_node(5)
    assert tree.root == TreeNode(5), 'expected True, got False'

    tree.insert_node(3)
    assert tree.root == TreeNode(5, left=TreeNode(3)), 'expected True, got False'

    tree.insert_node(9)
    assert tree.root == TreeNode(5, left=TreeNode(3), right=TreeNode(9)), 'expected True, got False'

    tree.insert_node(1)
    assert tree.root == TreeNode(5, left=TreeNode(3, left=TreeNode(1)), right=TreeNode(9)), 'expected True, got False'


    # test search
    node = tree.find_node(1)
    assert node == TreeNode(1), 'expected True, got False'

    node = tree.find_node(9)
    assert node == TreeNode(9), 'expected True, got False'

    node = tree.find_node(3)
    assert node == TreeNode(3, left=TreeNode(1)), 'expected True, got False'

    node = tree.find_node(5)
    assert node == TreeNode(5, left=TreeNode(3, left=TreeNode(1)), right=TreeNode(9)), 'expected True, got False'


    # test deletion
    tree.delete_node(tree.find_node(1))
    assert tree.root == TreeNode(5, left=TreeNode(3), right=TreeNode(9)), 'expected True, got False'

    tree = BST()
    tree.insert_list([5, 3, 9, 1, 4])
    tree.delete_node(tree.find_node(3))
    assert tree.root == TreeNode(5, left=TreeNode(4, left=TreeNode(1)), right=TreeNode(9)), 'expected True, got False'

    tree = BST()
    tree.insert_list([5, 3, 9, 1])
    tree.delete_node(tree.find_node(5))
    assert tree.root == TreeNode(9, left=TreeNode(3, left=TreeNode(1))), 'expected True, got False'


    # test insert list
    tree = BST()
    tree.insert_list([1, 2, 3])
    assert tree.root == TreeNode(1, right=TreeNode(2, right=TreeNode(3))), 'expected True, got False'

    tree = BST()
    tree.insert_list([1, 3, 2])
    assert tree.root == TreeNode(1, right=TreeNode(3, left=TreeNode(2))), 'expected True, got False'

    tree = BST()
    tree.insert_list([2, 1, 3])
    assert tree.root == TreeNode(2, left=TreeNode(1), right=TreeNode(3)), 'expected True, got False'

    tree = BST()
    tree.insert_list([2, 3, 1])
    assert tree.root == TreeNode(2, left=TreeNode(1), right=TreeNode(3)), 'expected True, got False'

    tree = BST()
    tree.insert_list([3, 1, 2])
    assert tree.root == TreeNode(3, left=TreeNode(1, right=TreeNode(2))), 'expected True, got False'

    tree = BST()
    tree.insert_list([3, 2, 1])
    assert tree.root == TreeNode(3, left=TreeNode(2, left=TreeNode(1))), 'expected True, got False'

    tree = BST()
    tree.insert_list([8, 5, 1, 7, 10, 12])
    assert tree.root == TreeNode(8, left=TreeNode(5, left=TreeNode(1), right=TreeNode(7)), right=TreeNode(10, right=TreeNode(12)))

    tree = BST()
    tree.insert_list([25, 15, 50, 10, 22, 35, 70, 4, 12, 18, 24, 31, 44, 66, 90])
    assert tree.root == TreeNode(25, left=TreeNode(15, left=TreeNode(10, left=TreeNode(4), right=TreeNode(12)), right=TreeNode(22, left=TreeNode(18), right=TreeNode(24))),
    right=TreeNode(50, left=TreeNode(35, left=TreeNode(31), right=TreeNode(44)), right=TreeNode(70, left=TreeNode(66), right=TreeNode(90)))), 'expected True, got False'

    tree = BST()
    tree.insert_list([25, 15, 10, 4, 12, 22, 18, 24, 50, 35, 31, 44, 70, 66, 90])
    assert tree.root == TreeNode(25, left=TreeNode(15, left=TreeNode(10, left=TreeNode(4), right=TreeNode(12)), right=TreeNode(22, left=TreeNode(18), right=TreeNode(24))),
    right=TreeNode(50, left=TreeNode(35, left=TreeNode(31), right=TreeNode(44)), right=TreeNode(70, left=TreeNode(66), right=TreeNode(90)))), 'expected True, got False'


    # test traversal. Just in case ;D
    tree = BST()
    tree.insert_list([1, 2, 3])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([1, 3, 2])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([2, 1, 3])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([2, 3, 1])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([3, 1, 2])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([3, 2, 1])
    assert tree.traverse() == [1, 2, 3], 'expected True, got False'

    tree = BST()
    tree.insert_list([25, 15, 10, 4, 12, 22, 18, 24, 50, 35, 31, 44, 70, 66, 90])
    assert tree.traverse() == [4, 10, 12, 15, 18, 22, 24, 25, 31, 35, 44, 50, 66, 70, 90], 'expected True, got False'
